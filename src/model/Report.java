package model;

import com.sun.org.apache.regexp.internal.RE;
import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.Select;
import domainapp.basics.util.Tuple;

import java.util.List;

/**
 * Created by Asus on 5/24/2017.
 */
public class Report {
    @DAttr(name = "id", type = DAttr.Type.String, mutable = false, id = true, auto = true, length = 10)
    private String id;
    private static int idCounter= 0;
    @DAttr(name = "heroes", type = DAttr.Type.Collection, optional = false,
            serialisable = false, filter = @Select(clazz = Hero.class))
    @DAssoc(ascName = "report-has-heroes", role = "report",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = Hero.class, cardMin = 0, cardMax = 25), dependsOn = true)
    private List<Hero> heroes;

    public Report(String id, List<Hero> heroes) {
        this.id = nextID(id);
        this.heroes = heroes;
    }
    public Report(String id){
        this(id, null);
    }
    public Report(){
        this(null, null);
    }

    private String nextID(String currId) {
        if (currId == null) {
            idCounter++;
            return Report.class.getSimpleName()+idCounter;
        } else {
            int num = Integer.parseInt(currId.substring(6));
            if (num > idCounter) {
                idCounter = num;
            }
        }
        return currId;
    }
    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue (
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {
        if (minVal != null && maxVal != null) {
            if (attrib.name().equals("id")) {
                int maxIdVal = Integer.parseInt(maxVal.toString().replaceAll("[^\\d.]", ""));
                if (maxIdVal > idCounter)
                    idCounter = maxIdVal;
            }
        }
    }
    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addHero(Hero hero) {
        if (!this.heroes.contains(hero)) {
            this.heroes.add(hero);
            return true;
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewHero(Hero hero) {
        this.heroes.add(hero);
        return true;
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addHeroes(List<Hero> heroes) {
        for (Hero hero : heroes) {
            if (!this.heroes.contains(hero)) {
                this.heroes.add(hero);
                return true;
            }
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addNewHeroes(List<Hero> heroes) {
        this.heroes.addAll(heroes);
        return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeHero(Hero hero) {
        this.heroes.remove(hero);
        return true;
    }
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public List<Hero> getHeroes() {
        return heroes;
    }

    public void setHeroes(List<Hero> heroes) {
        this.heroes = heroes;
    }

}
