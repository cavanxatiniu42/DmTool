package model;

import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.Select;
import domainapp.basics.util.Tuple;

import java.util.List;

/**
 * Created by Asus on 5/8/2017.
 */
public class ReportFilter {
    @DAttr(name = "reportId", type = DAttr.Type.String, id = true, auto = true, length = 10, mutable = false, optional = false)
    private String id;
    @DAttr(name = "heroes", type = DAttr.Type.Collection, optional = false,
            serialisable = false, filter = @Select(clazz = Hero.class))
    @DAssoc(ascName = "reportFilter-has-heroes", role = "Report",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = Hero.class, cardMin = 0, cardMax = 25))
    private List<Hero> heroes;
    @DAttr(name = "heroType", type = DAttr.Type.String, length = 10, mutable = true, optional = false)
    private String heroType;

    private static int idCounter = 0;
    protected static String nextId(String id) {
        idCounter++;
        return id + idCounter;


    }

    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) {
        if (minVal != null && maxVal != null) {
            if (attrib.name().equals("id")) {
                int maxIdVal = Integer.parseInt(maxVal.toString().replaceAll("[^\\d.]", ""));
                if (maxIdVal > idCounter)
                    idCounter = maxIdVal;
            }
        }
    }

    public ReportFilter(String id, List<Hero> heroes, String heroType) {
        this.id = id;
        this.heroes = heroes;
        this.heroType = heroType;
    }

    public ReportFilter(List<Hero> heroes, String heroType) {
        this("", heroes, heroType);
    }

    @DOpt(type = DOpt.Type.LinkAdder)
    public boolean addHeroes(List<Hero> heroes){
        for (Hero hero : heroes) {
            if (!this.heroes.contains(hero)) {
                if (hero instanceof Warrior){

                this.heroes.add(hero);
                }
                return true;
            }
        }
        return false;
    }
    @DOpt(type = DOpt.Type.LinkAdderNew)
    public boolean addHero(Hero hero){
        if (!this.heroes.contains(hero)){
            if (hero instanceof Warrior){

            this.heroes.add(hero);
            }
            return true;
        }
        return false;
    }

    @DOpt(type = DOpt.Type.LinkRemover)
    public boolean removeHero(Hero hero){
        return this.heroes.remove(hero);
    }
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public List<Hero> getHeroes() {
        return heroes;
    }

    public void setHeroes(List<Hero> heroes) {
        this.heroes = heroes;
    }

    public String getHeroType() {
        return heroType;
    }

    public void setHeroType(String heroType) {
        this.heroType = heroType;
    }
}
